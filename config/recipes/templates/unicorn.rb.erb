worker_processes <%= unicorn_workers %>
preload_app true

listen "<%= current_path %>/tmp/sockets/<%= application %>.sock", backlog: 64

working_directory "<%= current_path %>"
stderr_path "<%= unicorn_stderr_log %>"
stdout_path "<%= unicorn_stdout_log %>"
pid "<%= unicorn_pid %>"

Unicorn::HttpServer::START_CTX[0] = "<%= shared_path %>/bundle/bin/unicorn"
Unicorn::Configurator::DEFAULTS[:logger].formatter = Logger::Formatter.new

before_exec do |_|
  paths = (ENV["PATH"] || "").split(File::PATH_SEPARATOR)
  paths.unshift "<%= shared_path %>/bundle/bin"

  ENV["PATH"] = paths.uniq.join(File::PATH_SEPARATOR)
  ENV["GEM_HOME"] = ENV['GEM_PATH'] = "<%= shared_path %>/bundle"
  ENV["BUNDLE_GEMFILE"] = "<%= current_path %>/Gemfile"
end

before_fork do |server, worker|
  defined?(ActiveRecord::Base) && ActiveRecord::Base.connection.disconnect!
  
  old_pid = "#{server.config[:pid]}.oldbin"
  if old_pid != server.pid
    begin
      sig = (worker.nr + 1) >= server.worker_processes ? :QUIT : :TTOU
      puts "Sending #{sig} signal to old unicorn master..."
      Process.kill(sig, File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
    end
  end
  
  sleep 1
end

after_fork do |server, worker|
  defined?(ActiveRecord::Base) && ActiveRecord::Base.establish_connection
end
